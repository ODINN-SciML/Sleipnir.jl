
"""
    fake_interpolated_datacube()

Create a fake datacube of ice surface velocity time series.
It corresponds to the interpolated data.
"""
function fake_interpolated_datacube()
    dates = collect(DateTime(2011):Month(1):DateTime(2012))
    date1 = Vector{Union{Missing, DateTime}}(dates[begin:end-1])
    date2 = Vector{Union{Missing, DateTime}}(dates[begin+1:end])
    mid_date = mjd.(0.5.*(datetime2julian.(date1).- 2400000.5) .+ 0.5.*(datetime2julian.(date2) .- 2400000.5))
    mid_date = Dim{:mid_date}(mid_date)

    xstart = 325550.0
    ystart = 5088450.0
    step = 50.0
    nSteps = 250
    x = X(Float32.(xstart:step:xstart+(nSteps-1)*step))
    y = Y(Float32.(ystart:-step:ystart-(nSteps-1)*step))

    vx = Array{Union{Missing, Float32}, 3}(rand(x, y, mid_date))
    vx[1,1,:] .= missing

    vy = Array{Union{Missing, Float32}, 3}(rand(x, y, mid_date))
    vy[1,1,:] .= missing

    xcount_x = Array{Union{Missing, Int16}, 3}(rand(Int16.(1:6), length(x), length(y), length(mid_date)))
    xcount_y = Array{Union{Missing, Int16}, 3}(rand(Int16.(1:6), length(x), length(y), length(mid_date)))

    vx = Raster(vx, (x,y,mid_date))
    vy = Raster(vy, (x,y,mid_date))
    date1 = Raster(date1, (mid_date,))
    date2 = Raster(date2, (mid_date,))
    xcount_x = Raster(xcount_x, (x,y,mid_date))
    xcount_y = Raster(xcount_y, (x,y,mid_date))

    md = Dict{String, Any}(
        "history" => "Created on the $(today())",
        "author" => "ODINN team",
        "references" => "Not specified",
        "source" => "Fake datacube",
        "sensor" => "None",
        "title" => "Ice velocity time series",
        "institution" => "UniversitÃ© Grenoble Alpes",
        "proj4" => "+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs",
        "Conventions" => "CF-1.10",
    )

    fakeRasterStack = RasterStack((
        vx=vx,
        vy=vy,
        date1=date1,
        date2=date2,
        xcount_x=xcount_x,
        xcount_y=xcount_y,
        # grid_mapping=..., # Should contain a "0-dimensional Raster{String, 0} grid_mapping" but it doesn't seem possible with Rasters.jl
    ); metadata=md, missingval=missing)
    return fakeRasterStack
end


"""
    fake_multi_datacube()

Create a fake datacube of ice surface velocity time series.
It corresponds to the filtered multi source data.
"""
function fake_multi_datacube()
    xstart = 325550.0
    ystart = 5088450.0
    step = 50.0
    nSteps = 250
    x = X(Float32.(xstart:step:xstart+(nSteps-1)*step))
    y = Y(Float32.(ystart:-step:ystart-(nSteps-1)*step))
    z = Z(Base.OneTo(365))
    nletter = Dim{:nletter}(Base.OneTo(300))
    nletter2 = Dim{:nletter2}(Base.OneTo(30))

    dates = collect(DateTime(2011):Day(1):DateTime(2012))
    date1 = Int32.(round.(datetime2julian.(dates[begin:end-1])))
    date2 = Int32.(round.(datetime2julian.(dates[begin+1:end])))

    vx = Array{Union{Missing, Float32}, 3}(rand(x, y, z))
    vx[1,1,:] .= missing

    vy = Array{Union{Missing, Float32}, 3}(rand(x, y, z))
    vy[1,1,:] .= missing

    error_vx = Float32.(abs.(rand(length(z))))
    error_vy = Float32.(abs.(rand(length(z))))

    source = fill('c', (length(nletter), length(z)))
    sensor = fill('s', (length(nletter2), length(z)))
    creation_date = fill('d', (length(nletter), length(z)))

    vx = Raster(vx, (x,y,z))
    vy = Raster(vy, (x,y,z))
    date1 = Raster(date1, (z,))
    date2 = Raster(date2, (z,))
    error_vx = Raster(error_vx, (z,))
    error_vy = Raster(error_vy, (z,))
    source = Raster(source, (nletter, z))
    sensor = Raster(sensor, (nletter2, z))
    creation_date = Raster(creation_date, (nletter, z))

    md = Dict{String, Any}(
        "Projection" => "UTM",
        "Version" => "2.0 (Dec2019)",
        "proj4" => "+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs",
        "history" => "Created on the $(today())",
        "nx" => nSteps,
        "ny" => nSteps,
        "nz" => length(z),
        "Author" => "ODINN team",
        "i" => 1225,
        "j" => 3675,
        "Title" => "Cube of Ice Velocity",
        "Conventions" => "CF-1.6",
        "Notes" => "Data are fake and were randomly generated by ODINN",
    )

    fakeRasterStack = RasterStack((
        vx=vx,
        vy=vy,
        date1=date1,
        date2=date2,
        error_vx=error_vx,
        error_vy=error_vy,
        source=source,
        sensor=sensor,
        creation_date=creation_date,
    ); metadata=md, missingval=missing)

    return fakeRasterStack
end


"""
    surface_velocity_data()

Test the initialization of ice surface velocity structure w/ and w/o glacier gridding.
It creates fake `RasterStack` objects that mimic the structure of the true netCDF files.
"""
function surface_velocity_data()
    @testset "Fake interpolated datacube w/o glacier gridding" begin
        fakeRasterStack = fake_interpolated_datacube()
        initialize_surfacevelocitydata(fakeRasterStack)
        @inferred initialize_surfacevelocitydata(fakeRasterStack)
    end
    @testset "Fake multi datacube w/o glacier gridding" begin
        fakeRasterStack = fake_multi_datacube()
        initialize_surfacevelocitydata(fakeRasterStack)
        @inferred initialize_surfacevelocitydata(fakeRasterStack)
    end

    rgi_paths = get_rgi_paths()
    rgi_ids = ["RGI60-11.03646"]
    rgi_paths = Dict(k => rgi_paths[k] for k in rgi_ids)
    params = Parameters(
        simulation=SimulationParameters(
            velocities=true,
            use_glathida_data=false,
            working_dir=Sleipnir.root_dir,
            test_mode=true,
            rgi_paths=rgi_paths
        )
    )
    @inferred Parameters(
        simulation=SimulationParameters(
            velocities=true,
            use_glathida_data=false,
            working_dir=Sleipnir.root_dir,
            test_mode=true,
            rgi_paths=rgi_paths
        )
    )
    glaciers = initialize_glaciers(rgi_ids, params)
    @inferred initialize_glaciers(rgi_ids, params)

    @testset "Fake interpolated datacube w glacier gridding" begin
        fakeRasterStack = fake_interpolated_datacube()
        initialize_surfacevelocitydata(fakeRasterStack; glacier=glaciers[1])
        @inferred initialize_surfacevelocitydata(fakeRasterStack; glacier=glaciers[1])
    end
    @testset "Fake multi datacube w/ glacier gridding" begin
        fakeRasterStack = fake_multi_datacube()
        initialize_surfacevelocitydata(fakeRasterStack; glacier=glaciers[1])
        @inferred initialize_surfacevelocitydata(fakeRasterStack; glacier=glaciers[1])
    end
end
