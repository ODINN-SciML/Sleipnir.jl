name: Run Tests
on:
  pull_request:
    branches:
      - main
      - pythoncall2
  push:
    branches: []
    tags: '*'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1'
        python:
          - 3.12
        os:
          - ubuntu-latest 
          - macos-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 🐍 ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}  
      - name: Create environment with micromamba 🐍🖤
        uses: mamba-org/setup-micromamba@v1
        with: 
          micromamba-version: '1.5.6-0'
          environment-file: ./environment.yml
          environment-name: oggm_env                # it is recommendable to add both name and yml file. 
          init-shell: bash
          cache-environment: false
          cache-downloads: false
#           condarc-file: ./condarc.yml                # If necessary, we can include .condarc to configure environment
      # - name: Test creation of environment with micromamba 🔧🐍🖤
      #   run: | 
      #       which python
      #       conda env export
      #   shell: bash -el {0}
      - name: Update certifi
        run: | 
            pip install --upgrade certifi
        shell: bash -el {0}
      - name: Set ENV Variables for PyCall.jl 🐍 📞
        run: | 
          echo "PYTHON=/home/runner/micromamba/envs/oggm_env/bin/python" >> "$GITHUB_ENV"
        shell: bash -el {0}
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Check Julia SSL certifications 🔎🔐
        run: |
          julia -e 'using NetworkOptions; println(NetworkOptions.bundled_ca_roots()); println(NetworkOptions.ca_roots_path()); println(NetworkOptions.ssh_key_path()); println(NetworkOptions.ssh_key_name()); println(NetworkOptions.ssh_pub_key_path())'
          echo "SSH_PATH=$(julia -e 'using NetworkOptions; println(NetworkOptions.bundled_ca_roots())')" >> "$GITHUB_ENV"
        shell: bash -el {0}
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2 libxml2-dev libspatialite7 libspatialite-dev
          echo "========= Checking on Installs =========="
          dpkg -L libxml2
          echo "========= Checking on Installs =========="
          dpkg -L libspatialite7
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> "$GITHUB_ENV"
          # export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install libxml2 libspatialite
          echo "========= Checking on Installs =========="
          brew info libxml2
          echo "========= Checking on Installs =========="
          brew info libspatialite
          # export PKG_CONFIG_PATH="/opt/homebrew/opt/libxml2/lib/pkgconfig"
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/libxml2/lib/pkgconfig" >> "$GITHUB_ENV"
          # export PKG_CONFIG_PATH="/usr/local/opt/libxml2/lib/pkgconfig:"   
      - name: Check that new paths had been exported
        if: matrix.os == 'macos-latest'
        run: |
          echo $PYTHON
          echo $PKG_CONFIG_PATH
      - uses: julia-actions/cache@v1
        with:
          cache-registries: "true"
          cache-compiled: "true"
      - name: Build Julia packages in Ubuntu
        uses: julia-actions/julia-buildpkg@v1
        if: matrix.os == 'ubuntu-latest'
        env:
          PYTHON : /home/runner/micromamba/envs/oggm_env/bin/python
          # The SSL certificate path can be readed from the action "Check Julia SSL certifications"
          # SSL_CERT_FILE: $SSH_PATH
          SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      - name: Build Julia packages in MacOS
        uses: julia-actions/julia-buildpkg@v1
        if: matrix.os == 'macos-latest'
        # env:
        #   PYTHON : /home/runner/micromamba/envs/oggm_env/bin/python
        #   SSL_CERT_FILE: /Users/runner/hostedtoolcache/julia/1.11.1/x64/share/julia/cert.pem
      - name: Run tests in Ubuntu
        uses: julia-actions/julia-runtest@v1
        if: matrix.os == 'ubuntu-latest'
        # env:
        #   PYTHON : /home/runner/micromamba/envs/oggm_env/bin/python
        #   SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      - name: Run tests in MacOS
        uses: julia-actions/julia-runtest@v1
        if: matrix.os == 'macos-latest'
        # env:
        #   PYTHON : /home/runner/micromamba/envs/oggm_env/bin/python
        #   SSL_CERT_FILE: /Users/runner/hostedtoolcache/julia/1.11.1/x64/share/julia/cert.pem 
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: lcov.info