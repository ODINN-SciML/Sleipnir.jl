name: Run Tests
on:
  pull_request:
    branches:
      - main
      - pythoncall2
  push:
    branches: []
    tags: '*'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
        python:
          - '3.12'
        os: 
          - ubuntu-latest
          - macos-latest
        arch:
          - x64
    steps:
      # - name: Cancel ongoing test runs for previous commits
      #   uses: styfle/cancel-workflow-action@0.12.1
      #   with:
      #     access_token: ${{ github.token }}
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2 libxml2-dev libspatialite7 libspatialite-dev
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install libxml2 libspatialite
      - uses: julia-actions/cache@v2
        with:
          cache-registries: "false"
          cache-compiled: "false"
      # - uses: actions/cache@v4
      #   env:
      #     cache-name: cache-artifacts
      #   with:
      #     path: ~/.julia/artifacts
      #     key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-test-${{ env.cache-name }}-
      #       ${{ runner.os }}-test-
      #       ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - name: Check Julia SSL certifications 🔎🔐
        run: |
          julia -e 'using NetworkOptions; println(NetworkOptions.bundled_ca_roots()); println(NetworkOptions.ca_roots()); println(NetworkOptions.ca_roots_path()); println(NetworkOptions.ssh_key_path()); println(NetworkOptions.ssh_key_name()); println(NetworkOptions.ssh_pub_key_path())'
          # echo "SSL_CERT_PATH=$(julia -e 'using NetworkOptions; println(NetworkOptions.bundled_ca_roots())')" >> "$GITHUB_ENV"
      - name: Run tests in Ubuntu
        uses: julia-actions/julia-runtest@v1
        if: matrix.os == 'ubuntu-latest'
        env:
          # Specify the file or directory containing the certificate authority roots. See NetworkOptions.ca_roots
          JULIA_SSL_CA_ROOTS_PATH: /opt/hostedtoolcache/julia/1.10.7/x64/share/julia/cert.pem
          # The default value returned by ca_roots_path() may be overridden by setting the JULIA_SSL_CA_ROOTS_PATH, SSL_CERT_DIR, or SSL_CERT_FILE environment variables,
          SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      - name: Run tests in MacOS
        uses: julia-actions/julia-runtest@v1
        if: matrix.os == 'macos-latest'
        env:
          JULIA_SSL_CA_ROOTS_PATH: /Users/runner/hostedtoolcache/julia/1.10.7/x64/share/julia/cert.pem
          SSL_CERT_FILE: /Users/runner/hostedtoolcache/julia/1.10.7/x64/share/julia/cert.pem
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: lcov.info